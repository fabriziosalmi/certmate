================================================================================
                    CERTMATE DNS PROVIDERS - QUICK REFERENCE
================================================================================

SUPPORTED PROVIDERS (21 TOTAL)
================================================================================

MAJOR CLOUD PROVIDERS:
  1. Cloudflare              certbot-dns-cloudflare
  2. AWS Route53             certbot-dns-route53
  3. Google Cloud DNS        certbot-dns-google
  4. Microsoft Azure DNS     certbot-dns-azure

ENTERPRISE PROVIDERS:
  5. PowerDNS                certbot-dns-powerdns
  6. DNS Made Easy           certbot-dns-dnsmadeeasy
  7. NS1                     certbot-dns-nsone

CLOUD INFRASTRUCTURE:
  8. DigitalOcean            certbot-dns-digitalocean
  9. Linode                  certbot-dns-linode
  10. Vultr                  certbot-dns-vultr
  11. Hetzner                certbot-dns-hetzner

DOMAIN REGISTRARS:
  12. Gandi                  certbot-dns-gandi
  13. Namecheap              certbot-dns-namecheap
  14. Porkbun                certbot-dns-porkbun
  15. GoDaddy                certbot-dns-godaddy

REGIONAL PROVIDERS:
  16. OVH                    certbot-dns-ovh
  17. ArvanCloud             certbot-dns-arvancloud

SPECIALIZED PROVIDERS:
  18. RFC2136                certbot-dns-rfc2136 (BIND-compatible)
  19. ACME-DNS               certbot-acme-dns
  20. Hurricane Electric     certbot-dns-he-ddns
  21. Dynu                   certbot-dns-dynudns


KEY FILES & LOCATIONS
================================================================================

CONFIGURATION FILES:
  • Main Settings:           data/settings.json
  • DNS Config (Temp):       letsencrypt/config/[provider].ini
  • Certificates:           certificates/[domain]/
  • Metadata:               certificates/[domain]/metadata.json

SOURCE FILES:
  • DNS Manager:            modules/core/dns_providers.py
  • Certificate Manager:    modules/core/certificates.py
  • Settings Manager:       modules/core/settings.py
  • Utilities:              modules/core/utils.py
  • Main App:               app.py
  • Documentation:          DNS_PROVIDERS.md


CREDENTIALS REQUIRED BY PROVIDER
================================================================================

Single-field providers:
  • cloudflare:             api_token
  • digitalocean:           api_token
  • linode:                 api_key
  • gandi:                  api_token
  • vultr:                  api_key
  • hetzner:                api_token
  • nsone:                  api_key
  • arvancloud:             api_key

Two-field providers:
  • route53:                access_key_id, secret_access_key (+ region)
  • dnsmadeeasy:            api_key, secret_key
  • porkbun:                api_key, secret_key
  • godaddy:                api_key, secret
  • he-ddns:                username, password

Three-field providers:
  • powerdns:               api_url, api_key

Four-field providers:
  • ovh:                    endpoint, application_key, application_secret, consumer_key
  • namecheap:              username, api_key

Five-field providers:
  • azure:                  subscription_id, resource_group, tenant_id, client_id, client_secret
  • google:                 project_id, service_account_key

Multi-field providers:
  • rfc2136:                nameserver, tsig_key, tsig_secret, tsig_algorithm (optional)
  • acme-dns:               api_url, username, password, subdomain
  • dynudns:                token


CONFIGURATION STRUCTURE
================================================================================

LEGACY FORMAT (Auto-migrated):
{
  "dns_providers": {
    "cloudflare": {
      "api_token": "token_value"
    }
  }
}

MODERN FORMAT (Multi-account):
{
  "dns_provider": "cloudflare",
  "dns_providers": {
    "cloudflare": {
      "accounts": {
        "default": {"api_token": "..."},
        "production": {"api_token": "..."}
      }
    },
    "route53": {
      "accounts": {
        "default": {"access_key_id": "...", "secret_access_key": "..."}
      }
    }
  },
  "default_accounts": {
    "cloudflare": "production",
    "route53": "default"
  },
  "domains": [
    {"domain": "cf.example.com", "dns_provider": "cloudflare", "account_id": "production"},
    {"domain": "aws.example.com", "dns_provider": "route53", "account_id": "default"}
  ]
}


ENVIRONMENT VARIABLE OVERRIDES
================================================================================

Standard Variables:
  CLOUDFLARE_TOKEN=your_token
  AWS_ACCESS_KEY_ID=key
  AWS_SECRET_ACCESS_KEY=secret
  AWS_DEFAULT_REGION=us-east-1
  LETSENCRYPT_EMAIL=email@example.com

Azure:
  AZURE_SUBSCRIPTION_ID=...
  AZURE_RESOURCE_GROUP=...
  AZURE_TENANT_ID=...
  AZURE_CLIENT_ID=...
  AZURE_CLIENT_SECRET=...

Google Cloud:
  GOOGLE_PROJECT_ID=...
  GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json

PowerDNS:
  POWERDNS_API_URL=https://server:8081
  POWERDNS_API_KEY=...


DNS PROPAGATION TIMES (seconds)
================================================================================

Fast (60 sec):
  cloudflare, route53, powerdns

Medium (120 sec):
  digitalocean, linode, google, arvancloud

Slow (180 sec):
  azure, gandi, ovh

Very Slow (300 sec):
  namecheap

Very Fast (30 sec):
  acme-dns


API ENDPOINTS
================================================================================

Get DNS Providers:
  GET /api/settings/dns-providers

Get Settings:
  GET /api/settings

Update Settings:
  POST /api/settings

Create Certificate:
  POST /api/certificates/create
  
  Payload:
  {
    "domain": "example.com",
    "email": "admin@example.com",
    "dns_provider": "cloudflare",
    "account_id": "default"
  }


KEY CLASSES
================================================================================

DNSManager (dns_providers.py):
  • get_dns_provider_account_config()      - Get account credentials
  • list_dns_provider_accounts()           - List all accounts
  • create_dns_account()                   - Add/update account
  • delete_dns_account()                   - Remove account
  • set_default_account()                  - Set default
  • suggest_dns_provider_for_domain()      - Suggest provider

CertificateManager (certificates.py):
  • create_certificate()                   - Create cert with DNS provider
  • renew_certificate()                    - Renew existing cert
  • get_certificate_info()                 - Get cert details

SettingsManager (settings.py):
  • load_settings()                        - Load with auto-migration
  • save_settings()                        - Save with validation
  • get_domain_dns_provider()              - Get provider for domain
  • migrate_dns_providers_to_multi_account() - Migrate old format

Utils (utils.py):
  • create_*_config()                      - Create credential files
  • validate_dns_provider_account()        - Validate credentials
  • generate_secure_token()                - Create API token


ADDING NEW PROVIDER - QUICK STEPS
================================================================================

1. Add to requirements.txt:
   certbot-dns-newprovider

2. Create config function in utils.py:
   def create_newprovider_config(api_key: str) -> Path:
       return _create_config_file("newprovider", f"dns_newprovider_api_key = {api_key}\n")

3. Add credentials definition in utils.py:
   _DNS_PROVIDER_CREDENTIALS['newprovider'] = ['api_key']

4. Import in certificates.py:
   from .utils import create_newprovider_config

5. Add handler in CertificateManager._create_dns_config_compat():
   elif dns_provider == 'newprovider':
       return config_func(dns_config.get('api_key', ''))

6. Add to create_certificate() method:
   elif dns_provider in ['newprovider']:
       credentials_file = self._create_dns_config_compat(dns_provider, dns_config)
       plugin_name = 'dns-newprovider'

7. Add to supported list in settings.py:
   supported_providers.add('newprovider')

8. Update documentation:
   DNS_PROVIDERS.md - Add provider example and credentials


TESTING
================================================================================

Test Files:
  • test_dns_provider.py                   - Basic functionality
  • test_dns_provider_detection.py         - Domain-to-provider mapping
  • test_dns_provider_inheritance.py       - Config inheritance
  • test_dns_accounts.py                   - Multi-account operations

Key Test Scenarios:
  1. Configuration validation
  2. Migration (single → multi-account)
  3. Environment variable override
  4. Domain-specific provider assignment
  5. Default account selection
  6. Account CRUD operations
  7. Credential validation


SECURITY BEST PRACTICES
================================================================================

1. Store credentials in environment variables for production
2. Use 0o600 file permissions (owner read/write only)
3. Never log full credentials (use masking in UI)
4. Delete temporary credential files after use
5. Validate all input before use
6. Use different accounts for different purposes
7. Rotate API tokens/keys regularly
8. Use service accounts with minimal permissions (Azure/Google)
9. Enable audit logging for DNS operations


CONFIGURATION PRIORITY (High to Low)
================================================================================

1. Environment Variables (highest priority)
2. Domain-specific settings (domain.dns_provider, domain.account_id)
3. Default account settings (default_accounts[provider])
4. Global provider setting (dns_provider)
5. System defaults (cloudflare)


TROUBLESHOOTING
================================================================================

Issue: "DNS provider not configured"
  → Verify all required credentials are provided
  → Check credentials validity with provider
  → Ensure account exists and is set as default

Issue: "Certificate creation failed"
  → Check DNS provider credentials and permissions
  → Verify domain is managed by DNS provider
  → Check API rate limits and quotas
  → Verify DNS propagation time is sufficient

Issue: "Plugin not found errors"
  → Run: pip install -r requirements.txt
  → For Docker: rebuild container to get latest plugins

Issue: "Provider detection failing"
  → Check domain is in settings.domains[]
  → Verify dns_provider field in domain object
  → Check default_accounts configuration
  → Verify global dns_provider setting


VERSION INFORMATION
================================================================================

CertMate Version: 1.2.1+
API Version: v1.2.1
Certbot Version: 2.10.0
Architecture: Modular with individual certbot plugins
Configuration Format: JSON (single file)
Database: None (file-based)


REFERENCES
================================================================================

Main Documentation:         DNS_PROVIDERS.md
Architecture Details:       DNS_PROVIDER_ARCHITECTURE.md
Certbot Plugin Docs:        https://certbot.eff.org/docs/plugins/index.html
Configuration Examples:     DNS_PROVIDERS.md (setup examples section)

================================================================================
